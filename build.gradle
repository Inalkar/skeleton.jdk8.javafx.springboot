buildscript {
    apply from: 'global-const.gradle'
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath group: 'com.layer', name: 'gradle-git-repo-plugin', version: '2.0.2'
        classpath group: 'de.dynamicfiles.projects.gradle.plugins', name: 'javafx-gradle-plugin', version: global_config.javafx.gradle_plugin_version
        classpath "org.liquibase:liquibase-gradle-plugin:$global_config.liquibase.gradle_plugin_version"
        classpath "com.h2database:h2:$global_config.h2.version"
        classpath 'net.nemerosa:versioning:2.6.1'
    }
}

plugins {
	id 'org.springframework.boot' version '1.5.8.RELEASE'
}

apply from: 'global-const.gradle'
apply from: 'local-const.gradle'

task wrapper(type: Wrapper) {
    gradleVersion = '4.6'
}

apply plugin: 'java'
apply plugin: 'idea'

compileJava.options.encoding = "UTF-8"
sourceCompatibility = 1.8

apply plugin: 'net.nemerosa.versioning'
version = "1.0.0-${versioning.info.build}"
global_config.app.version = version
application_properties.app.version = version

processResources {
    filesMatching('application.properties') {
        expand(application_properties)
    }
}

/************************* liquibase *********************************************************************************/
apply plugin: 'org.liquibase.gradle'

liquibase {
    activities {
        local {
            changeLogFile "$projectDir/src/main/liquibase/changelog.xml"
            url 'jdbc:h2:~/db;FILE_LOCK=NO'
            username 'sa'
            password ''
        }
    }

    runList = 'local'
}

task createDatabaseScript {
    group = 'database'
    doLast {
        def fileName = 'start-local-db'
        if(System.properties['os.name'].startsWith('Windows')) {
            fileName += '.bat'
        }
        def file = new File(projectDir, fileName)
        file.withPrintWriter {  pw ->
            pw.print("java -cp ${sourceSets.main.runtimeClasspath.asPath} org.h2.tools.Server")
        }
        file.setExecutable(true)
    }
}

task startDatabase(type: JavaExec) {
    group = 'database'
    workingDir = projectDir
    main = 'org.h2.tools.Server'
    classpath = sourceSets.main.runtimeClasspath
}

/************************* git-repo **********************************************************************************/
apply plugin: 'git-repo'

repositories {
    mavenCentral()
    git("https://github.com/Inalkar/com.inalkar.git", "com.inalkar", "master", "releases")
}

/************************* jacoco ************************************************************************************/
apply from: 'jacoco.gradle'
apply from: 'checkstyle.gradle'

dependencies {
    compile 'org.springframework.boot:spring-boot-starter'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework.boot:spring-boot-starter-jdbc'
    
    compile group: 'com.h2database', name: 'h2', version: global_config.h2.version
    compile group: 'org.liquibase', name: 'liquibase-core', version: global_config.liquibase.version
    compile group: 'com.zaxxer', name: 'HikariCP', version: global_config.hikariCP.version

    compile group: "de.codecentric.centerdevice", name: "javafxsvg", version: "1.2.1"
}

test {
    // enable TestNG support (default is JUnit)
//        useTestNG()

    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    // set heap size for the test JVM(s)
    minHeapSize = "128m"
    maxHeapSize = "512m"

    // set JVM arguments for the test JVM(s)
    jvmArgs '-XX:MaxPermSize=256m'

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
    }
}

apply from: 'javafx.gradle'